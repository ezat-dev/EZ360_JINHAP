<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="machine">

    <!-- //정기점검 계획/실적  -->   
<select id="getMachineList" parameterType="machine" resultType="machine">
    SELECT 
        equipment_name,
        DATE_FORMAT(updated_at, '%Y-%m-%d') AS updated_at,
        item_type,
        m1, m2, m3, m4, m5, m6,
        m7, m8, m9, m10, m11, m12,
        save_url,
        remark
    FROM tb_check_plan
    <where>
        <if test="startDate != null and startDate != ''">
            AND YEAR(created_at) = #{startDate}
        </if>
    </where>
    ORDER BY 
        FIELD(equipment_name,
            '세척 1호기',
            '세척 2호기',
            '쇼트 1호기',
            '쇼트 2호기',
            '쇼트 3호기',
            '쇼트 4호기',
            '쇼트 5호기',
            '쇼트 6호기',
            'G600',
            'G800',
            'K-BLACK',
            '공용설비'
        ),
        CASE item_type 
            WHEN '계획' THEN 0
            WHEN '실적' THEN 1
            ELSE 2
        END
</select>



<update id="updatecheckPlan" parameterType="machine">
    UPDATE tb_check_plan
    SET 
        equipment_name = #{equipment_name},
        inspection_date = #{updated_at},
        item_type = #{item_type},
        save_url = #{save_url},
        remark = #{remark},
        <if test="m1 != null">m1 = #{m1},</if>
        <if test="m2 != null">m2 = #{m2},</if>
        <if test="m3 != null">m3 = #{m3},</if>
        <if test="m4 != null">m4 = #{m4},</if>
        <if test="m5 != null">m5 = #{m5},</if>
        <if test="m6 != null">m6 = #{m6},</if>
        <if test="m7 != null">m7 = #{m7},</if>
        <if test="m8 != null">m8 = #{m8},</if>
        <if test="m9 != null">m9 = #{m9},</if>
        <if test="m10 != null">m10 = #{m10},</if>
        <if test="m11 != null">m11 = #{m11},</if>
        <if test="m12 != null">m12 = #{m12},</if>
        updated_at = NOW()
    WHERE equipment_name = #{equipment_name}
      AND item_type = #{item_type}
</update>





<select id="getTempDataList" parameterType="temp_data" resultType="map">
  SELECT temp_time,
  <choose>
    <when test="mch_code == 'T_600'">
      T_600_D12000, T_600_D12001
    </when>
    <when test="mch_code == 'T_800'">
      T_800_D12000, T_800_D12001
    </when>
    <when test="mch_code == 'BLK'">
      BLK_D12000, BLK_D12001
    </when>
    <when test="mch_code == 'MLPL'">
      MLPL_D12000, MLPL_D12001
    </when>
    <otherwise>
      NULL AS temp1, NULL AS temp2
    </otherwise>
  </choose>
  FROM tb_temp_data
  <where>
    <if test="startDate != null and endDate != null and startDate != '' and endDate != ''">
      temp_time BETWEEN #{startDate} AND #{endDate}
    </if>
  </where>
  ORDER BY temp_time
</select>



<select id="getAllDataList" parameterType="machine" resultType="machine">
SELECT * FROM v_moniteolingling
</select>

<select id="getNonTimeDataList" parameterType="machine" resultType="machine">
    SELECT
    	non_time_idx,
        equipment_name,
        machine_code,
        info_list,
        start_time,
      	end_time,
      	non_time_memo
    FROM tb_non_time
    <where>
        <if test="startDate != null and startDate != ''">
            AND start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND start_time &lt;= #{endDate}
        </if>
        <if test="equipment_name != null and equipment_name != ''">
            AND equipment_name = #{equipment_name}
        </if>
    </where>
    ORDER BY start_time DESC
</select>





<insert id="saveNonTime" parameterType="machine">
    INSERT INTO tb_non_time (
        equipment_name,
        machine_code,
        info_list,
        start_time,
        end_time,
        non_time_memo
    )
    VALUES (
        #{equipment_name},
        #{machine_code},
        #{info_list},
        #{start_time},
        #{end_time},
        #{non_time_memo}
    )
</insert>




<update id="updateNonTime" parameterType="machine">
    UPDATE tb_non_time
    SET
        equipment_name = #{equipment_name},
        machine_code = #{machine_code},
        info_list = #{info_list},
        start_time = #{start_time},
        end_time = #{end_time},
        non_time_memo = #{non_time_memo}
    WHERE non_time_idx = #{non_time_idx}
</update>

<delete id="deleteNonTime" parameterType="string">
    DELETE FROM tb_non_time
    WHERE non_time_idx = #{non_time_idx}
</delete>




<select id="getNonTimeDataView" resultType="map">
    SELECT
        main.equipment_name AS v_equipment_name,
        main.info_list AS info_list_v,

        -- 비가동 시간 계산
        SUM(
            TIMESTAMPDIFF(
                MINUTE,
                STR_TO_DATE(main.start_time, '%Y-%m-%d %H:%i'),
                STR_TO_DATE(main.end_time, '%Y-%m-%d %H:%i')
            )
        ) AS sum_time,

        -- 시간:분 형식으로 변환
        CONCAT(
            FLOOR(SUM(
                TIMESTAMPDIFF(
                    MINUTE,
                    STR_TO_DATE(main.start_time, '%Y-%m-%d %H:%i'),
                    STR_TO_DATE(main.end_time, '%Y-%m-%d %H:%i')
                )
            ) / 60), '시간 ',
            SUM(
                TIMESTAMPDIFF(
                    MINUTE,
                    STR_TO_DATE(main.start_time, '%Y-%m-%d %H:%i'),
                    STR_TO_DATE(main.end_time, '%Y-%m-%d %H:%i')
                )
            ) % 60, '분'
        ) AS sum_time_ch,

        -- 하루 기준 최대 발생 건수
        IFNULL(day_counts.max_day_count, 0) AS day_count,

        -- 전체 발생 건수
        COUNT(*) AS month_count

    FROM tb_non_time main

    LEFT JOIN (
        SELECT
            equipment_name,
            info_list,
            MAX(day_count) AS max_day_count
        FROM (
            SELECT
                equipment_name,
                info_list,
                DATE(STR_TO_DATE(start_time, '%Y-%m-%d %H:%i')) AS event_day,
                COUNT(*) AS day_count
            FROM tb_non_time
            WHERE 1 = 1
                <if test="startDate != null and startDate != ''">
                    AND STR_TO_DATE(start_time, '%Y-%m-%d %H:%i') &gt;= #{startDate}
                </if>
                <if test="endDate != null and endDate != ''">
                    AND STR_TO_DATE(end_time, '%Y-%m-%d %H:%i') &lt;= #{endDate}
                </if>
                <if test="equipment_name != null and equipment_name != ''">
                    AND equipment_name = #{equipment_name}
                </if>
            GROUP BY equipment_name, info_list, event_day
        ) AS daily_counts
        GROUP BY equipment_name, info_list
    ) AS day_counts
    ON main.equipment_name = day_counts.equipment_name
    AND main.info_list = day_counts.info_list

    WHERE 1 = 1
        <if test="startDate != null and startDate != ''">
            AND STR_TO_DATE(main.start_time, '%Y-%m-%d %H:%i') &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND STR_TO_DATE(main.end_time, '%Y-%m-%d %H:%i') &lt;= #{endDate}
        </if>
        <if test="equipment_name != null and equipment_name != ''">
            AND main.equipment_name = #{equipment_name}
        </if>

    GROUP BY
        main.equipment_name, main.info_list

    ORDER BY month_count DESC
</select>





<insert id="insertRepairStatus" parameterType="Machine">
    INSERT INTO tb_equipment_maintenance (
        id, work_date, operator, equipment_name, inspection_type,
        downtime_flag, downtime_minutes, category_mid, category_sub,
        part_flag, action, action_detail, replacement_type,
        part_name, part_replacement_flag, quantity, due_date,
        replacement_date, prev_replacement_date, usage_days,
        manufacturer, manager_name, contact, part_status,
        safety_stock, current_stock, purchase_qty
    ) VALUES (
    #{id}, #{work_date}, #{operator}, #{equipment_name}, #{inspection_type},
    #{downtime_flag}, #{downtime_minutes}, #{category_mid}, #{category_sub},
    #{part_flag}, #{action}, #{action_detail}, #{replacement_type},
    #{part_name}, #{part_replacement_flag}, #{quantity}, #{due_date},
    #{replacement_date}, #{prev_replacement_date}, #{usage_days},
    #{manufacturer}, #{manager_name}, #{contact}, #{part_status},
    #{safety_stock}, #{current_stock}, #{purchase_qty}
)

    ON DUPLICATE KEY UPDATE
        work_date = VALUES(work_date),
        operator = VALUES(operator),
        equipment_name = VALUES(equipment_name),
        inspection_type = VALUES(inspection_type),
        downtime_flag = VALUES(downtime_flag),
        downtime_minutes = VALUES(downtime_minutes),
        category_mid = VALUES(category_mid),
        category_sub = VALUES(category_sub),
        part_flag = VALUES(part_flag),
        action = VALUES(action),
        action_detail = VALUES(action_detail),
        replacement_type = VALUES(replacement_type),
        part_name = VALUES(part_name),
        part_replacement_flag = VALUES(part_replacement_flag),
        quantity = VALUES(quantity),
        due_date = VALUES(due_date),
        replacement_date = VALUES(replacement_date),
        prev_replacement_date = VALUES(prev_replacement_date),
        usage_days = VALUES(usage_days),
        manufacturer = VALUES(manufacturer),
        manager_name = VALUES(manager_name),
        contact = VALUES(contact),
        part_status = VALUES(part_status),
        safety_stock = VALUES(safety_stock),
        current_stock = VALUES(current_stock),
        purchase_qty = VALUES(purchase_qty)
</insert>

<delete id="delRepairStatus" parameterType="Machine">
    DELETE FROM tb_equipment_maintenance
    WHERE id = #{id}
</delete>






<select id="getRepairStatusList" parameterType="Machine" resultType="Machine">
    SELECT
        id, work_date, operator, equipment_name, inspection_type,
        downtime_flag, downtime_minutes, category_mid, category_sub,
        part_flag, action, action_detail, replacement_type,
        part_name, part_replacement_flag, quantity, due_date,
        replacement_date, prev_replacement_date, usage_days,
        manufacturer, manager_name, contact, part_status,
        safety_stock, current_stock, purchase_qty
    FROM tb_equipment_maintenance
    <where>
       <if test="equipmentName != null and equipmentName != ''">
    AND equipment_name = #{equipmentName}
		</if>
		
		<if test="startDate != null and endDate != null">
		    AND work_date BETWEEN #{startDate} AND #{endDate}
		</if>
		<if test="startDate != null and endDate == null">
		    AND work_date &gt;= #{startDate}
		</if>
		<if test="endDate != null and startDate == null">
		    AND work_date &lt;= #{endDate}
		</if>

    </where>
    ORDER BY work_date DESC, id DESC
</select>








 
  <select id="getPartStatusList" parameterType="Machine" resultType="Machine">
    SELECT *
    FROM (
      SELECT * 
      FROM tb_part_status 
      WHERE mch_name = #{mch_name}

      UNION ALL

      SELECT * 
      FROM tb_part_status 
      WHERE NOT EXISTS (
        SELECT 1 FROM tb_part_status WHERE mch_name = #{mch_name}
      )
    ) AS sub
    ORDER BY no DESC
  </select>

	<insert id="insertPartStatus" parameterType="Machine">
	  INSERT INTO tb_part_status
	    (no,
	     mch_name,
	     chg_item,
	     chg_date,
	     reason,
	     required_info,
	     target_date,
	     change_by,
	     company_name,
	     remark)
	  VALUES
	    (#{no},
	     #{mch_name},
	     #{chg_item},
	     #{chg_date},
	     #{reason},
	     #{required_info},
	     #{target_date},
	     #{change_by},
	     #{company_name},
	     #{remark})
	  ON DUPLICATE KEY UPDATE
	    mch_name       = VALUES(mch_name),
	    chg_item       = VALUES(chg_item),
	    chg_date       = VALUES(chg_date),
	    reason         = VALUES(reason),
	    required_info  = VALUES(required_info),
	    target_date    = VALUES(target_date),
	    change_by      = VALUES(change_by),
	    company_name   = VALUES(company_name),
	    remark         = VALUES(remark)
	</insert>


  
  <delete id="delPartStatus" parameterType="Machine">
    DELETE FROM tb_part_status 
    WHERE no = #{no}
  </delete>




<select id="getspareStatusList" parameterType="Machine" resultType="Machine">
    SELECT *
    FROM (
        SELECT *
        FROM tb_sparestatus_status
        WHERE mch_name = #{mch_name}

        UNION ALL

        SELECT *
        FROM tb_sparestatus_status
        WHERE NOT EXISTS (
            SELECT 1 FROM tb_sparestatus_status WHERE mch_name = #{mch_name}
        )
    ) AS sub
    ORDER BY no DESC
</select>


<insert id="insertspareStatus" parameterType="Machine">
    INSERT INTO tb_sparestatus_status (
        no,
        mch_name,
        mch_parts,
        a_usage,
        standard,
        producer,
        replacement,
        buy_cycle,
        stock,
        now_stock,
        remark,
        day_update
    )
    VALUES (
        #{no},
        #{mch_name},
        #{mch_parts},
        #{a_usage},
        #{standard},
        #{producer},
        #{replacement},
        #{buy_cycle},
        #{stock},
        #{now_stock},
        #{remark},
        NOW()
    )
    ON DUPLICATE KEY UPDATE
        mch_name = VALUES(mch_name),
        mch_parts = VALUES(mch_parts),
        a_usage = VALUES(a_usage),
        standard = VALUES(standard),
        producer = VALUES(producer),
        replacement = VALUES(replacement),
        buy_cycle = VALUES(buy_cycle),
        stock = VALUES(stock),
        now_stock = VALUES(now_stock),
        remark = VALUES(remark),
        day_update = CURRENT_TIMESTAMP
</insert>


<delete id="delspareStatus" parameterType="Machine">
    DELETE FROM tb_sparestatus_status
    WHERE no = #{no}
</delete>








<select id="getlogStatusList" parameterType="Machine" resultType="Machine">
  SELECT *
  FROM tb_log_status
  WHERE LEFT(gong_date,4) = #{gong_date}
  <if test="mch_name != null and mch_name != '' and mch_name != 'ALL'">
    AND mch_name = #{mch_name}
  </if>
  ORDER BY gong_date DESC
</select>



<insert id="insertlogStatus" parameterType="Machine">
  INSERT INTO tb_log_status (
    no,
    gong_date,
    mch_code,
    mch_name,
    result,
    g_b,
    gong_type,
    gong_hr,
    remark
  )
  VALUES (
    #{no},
    #{gong_date},
    #{mch_code},
    #{mch_name},
    #{result},
    #{g_b},
    #{gong_type},
    #{gong_hr},
    #{remark}
  )
  ON DUPLICATE KEY UPDATE
    gong_date = VALUES(gong_date),
    mch_code  = VALUES(mch_code),
    mch_name  = VALUES(mch_name),
    result    = VALUES(result),
    g_b       = VALUES(g_b),
    gong_type = VALUES(gong_type),
    gong_hr   = VALUES(gong_hr),
    remark    = VALUES(remark)
</insert>


 
  <delete id="dellogStatus" parameterType="Machine">
    DELETE FROM tb_log_status
    WHERE no = #{no}
  </delete>
  
  
  
<select id="getErrDataList" parameterType="Machine" resultType="Machine">
  SELECT
      e.position_cd,
      e.mach_code,
      e.facility_name,
      e.line_cd,
      e.err_code,
      e.err_name,
      e.start_time_formatted,
      e.end_time_formatted,
      e.remark
  FROM
      v_errdata e
  WHERE
    1 = 1
    <if test="mach_code != null and mach_code != 'ALL'">
      AND e.mach_code = #{mach_code}
    </if>
    AND e.start_time_formatted &gt;= #{start_time}
    AND e.end_time_formatted &lt;= #{end_time}
  ORDER BY
      e.start_time_formatted
</select>


<select id="getErrAlarmRanking" parameterType="Machine" resultType="Machine">
  SELECT
    e.mach_code,
    e.facility_name,  <!-- 설비명 추가 -->
    e.err_code,
    e.err_name,
    COUNT(*) AS alarm_count
  FROM
    v_errdata e
  WHERE
    1 = 1
    <if test="mach_code != null and mach_code != 'ALL'">
      AND e.mach_code = #{mach_code}
    </if>
    AND e.start_time_formatted <![CDATA[ >= ]]> #{start_time}
    AND e.end_time_formatted <![CDATA[ <= ]]> #{end_time}
  GROUP BY
    e.mach_code, e.facility_name, e.err_code, e.err_name  <!-- group by에 추가 -->
  ORDER BY
    alarm_count DESC
</select>





<select id="getFacilityList" resultType="Machine">
    SELECT 
        facility_code,
        facility_name,
        facility_mach_code,
        facility_comment,
        c_t,
        capa,
        std_weight,
        non_time,
        work_time2,
        facility_yn,
        ch_idx
    FROM tb_facility
    ORDER BY ch_idx ASC
</select>




 <delete id="deleteFacility" parameterType="Machine">
    DELETE FROM tb_facility
    WHERE facility_code = #{facility_code}
</delete>
 
<insert id="insertFacility" parameterType="Machine">
    INSERT INTO tb_facility (
        facility_code,
        facility_name,
        facility_mach_code,
        facility_comment,
        c_t,
        capa,
        std_weight,
        non_time,
        work_time2,
        facility_yn,
        ch_idx
    )
    VALUES (
        #{facility_code},
        #{facility_name},
        #{facility_mach_code},
        #{facility_comment},
        #{c_t},
        #{capa},
        #{std_weight},
        #{non_time},
        #{work_time2},
        #{facility_yn},
        #{ch_idx}
    )
    ON DUPLICATE KEY UPDATE
        facility_name = VALUES(facility_name),
        facility_mach_code = VALUES(facility_mach_code),
        facility_comment = VALUES(facility_comment),
        c_t = VALUES(c_t),
        capa = VALUES(capa),
        std_weight = VALUES(std_weight),
        non_time = VALUES(non_time),
        work_time2 = VALUES(work_time2),
        facility_yn = VALUES(facility_yn),
        ch_idx = VALUES(ch_idx)
</insert>




<select id="getdetailMonitoring" resultType="Machine">
  SELECT
    *
  FROM
    v_geo_prodmon_view
</select>

</mapper>

